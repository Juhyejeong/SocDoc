<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="admin">

 	<select id="selectQnAList" resultType="com.synergy.socdoc.member.QnaBoardVO">
		select qnaSeq, subject, userid, regDate, status
		from qnaBoard
		order by qnaSeq desc 
	</select>
	
	<!-- 공지사항 상세 글보기 -->
	<select id="getView" parameterType="String" resultType="com.synergy.socdoc.member.NoticeVO">
		select  preseq, presubject, 
		        noticeseq, subject, content, regDate
		        nextseq, nextsubject
		from 
		(
		    select lag(noticeseq, 1) over(order by noticeseq desc)  as preseq
		            , lag(subject, 1) over(order by noticeseq desc) as presubject
		            , noticeseq, subject, content
		            , to_char(regDate, 'yyyy-mm-dd') as regDate
		           
		            , lead(noticeseq, 1) over(order by noticeseq desc) as nextseq
		            , lead(subject, 1) over(order by noticeseq desc) as nextsubject
		    from noticeBoard
		) V
		where V.noticeSeq = #{noticeSeq}
	</select>
 	
 	
 	<!-- 회원관리 목록 (페이징처리) -->
 	<select id="getTotalCount" parameterType="HashMap" resultType="int">
		select count(*)
		from member
		where status in (1,0)
			<if test='searchWord != ""'>
				and lower(${searchType}) like '%' || lower(#{searchWord}) || '%'
			</if>
	</select>
	<select id="memberListSearchWithPaging" parameterType="HashMap" resultType="com.synergy.socdoc.member.MemberVO">
		select rno, userid, name, birthDate, email, phone, registerDate, status
		from
	    ( 
	        select rownum as rno, userid, name, birthDate, email, phone, registerDate, status 
			from 
			(
				select userid, name, to_char(birthDate,'yyyy-mm-dd') AS birthDate, email, phone, to_char(registerDate,'yyyy-mm-dd') AS registerDate, status
				from member
				where status in (1,0)
				<if test='searchWord != ""'>
					and ${searchType} like '%' || #{searchWord} || '%'
				</if>
			) V
		)T
		where rno between #{startRno} and #{endRno}
	</select>
	<!-- 회원탈퇴 -->
	<update id="updateMember" parameterType="HashMap">
		update member set status = 0
    	where userid = #{userid}
	</update>
	

	<!-- 공지사항 글 목록 (페이징처리) -->
	<select id="noticeTotalCount" parameterType="HashMap" resultType="int">
		select count(*)
		from noticeBoard
	</select>
	<select id="noticeListPaging" parameterType="HashMap" resultType="com.synergy.socdoc.member.NoticeVO">
		select rno, noticeSeq, subject, regDate
		from
	    ( 
	        select rownum as rno, noticeSeq, subject, regDate 
			from 
			(
				select noticeSeq, subject, to_char(regDate,'yyyy-mm-dd') AS regDate
				from noticeBoard
				order by noticeSeq desc
			) V
		)T
		where rno between #{startRno} and #{endRno}
	</select>


	<!-- 건강정보 글 목록 (페이징처리) -->
	<select id="healthInfoCount" parameterType="HashMap" resultType="int">
		select count(*)
		from noticeBoard
	</select>
	<select id="healthInfoPaging" parameterType="HashMap" resultType="com.synergy.socdoc.member.HealthInfoVO">
		select rno, infoSeq, subject, regDate
		from
	    ( 
	        select rownum as rno, infoSeq, subject, regDate
			from 
			(
				select infoSeq, subject, to_char(regDate,'yyyy-mm-dd') AS regDate
				from infoBoard
				order by infoSeq desc
			) V
		)T
		where rno between #{startRno} and #{endRno}
	</select>
 	
 	
 	<select id="selectfaqList" resultType="com.synergy.socdoc.member.FaqBoardVO">
		select faqSeq, question, answer
		from faqboard
		order by faqSeq desc 
	</select>
	
	
	<!-- 병원회원 목록 (페이징처리) -->
	<select id="hpMemberCount" parameterType="HashMap" resultType="int">
		select count(*)
		from hpMember
		where infoStatus in (1,0)
			<if test='searchWord != ""'>
				and ${searchType} like '%' || #{searchWord} || '%'
			</if>
	</select>
	<select id="hpmemberListPaging" parameterType="HashMap" resultType="com.synergy.socdoc.member.HpMemberVO">
		
		select rno, userid, regId, name, email, registerDate, infoStatus
		from
	    ( 
	        select rownum as rno, userid, regId, name, email, registerDate, infoStatus
			from 
			(
				select userid, regId, name, email, to_char(registerDate,'yyyy-mm-dd') AS registerDate, infoStatus
				from hpMember
				where infoStatus in (1,0)
				<if test='searchWord != ""'>
					and ${searchType} like '%' || #{searchWord} || '%'
				</if>
			) V
		)T
		where rno between #{startRno} and #{endRno}
		
		<!-- 
		select rno, userid, regId, name, email, to_char(registerDate,'yyyy-mm-dd') AS registerDate, infoStatus, nvl(b.hpname, '미등록')
		from 
		(
			select rownum as rno, userid, regId, name, email, to_char(registerDate,'yyyy-mm-dd') AS registerDate, infoStatus, nvl(b.hpname, '미등록')
			from
				(
				select  userid, regId, name, email, to_char(registerDate,'yyyy-mm-dd') AS registerDate, infoStatus, nvl(b.hpname, '미등록')
				from hpMember A left join hospitalinfo B
				on a.hpseq = b.hpseq
				)V
			)T
		where rno between #{startRno} and #{endRno}
		
		 -->
	</select>
	
	
	<!-- 병원(정보)등록 목록 (페이징처리) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
	<select id="hpInfoCount" parameterType="HashMap" resultType="int">
		select count(*)
		from hpMember
		where infoStatus in (1,3)
			<if test='searchWord != ""'>
				and lower(${searchType}) like '%' || lower(#{searchWord}) || '%'
			</if>
	</select>
	<resultMap type="HashMap" id="hpinfoMap">
       <result property="rno"                column="rno"                javaType="String"/>
       <result property="userid"             column="userid"             javaType="String"/>
       <result property="regId"              column="regId"              javaType="String"/>
       <result property="name"             	 column="name"               javaType="String"/>
       <result property="infoStatus"         column="infoStatus"         javaType="String"/>
       <result property="hpName"         	 column="hpName"         	 javaType="String"/>
    </resultMap>
	<select id="hpInfoListPaging" parameterType="HashMap" resultMap="hpinfoMap">
		select rno, userid, regId, name, infoStatus, hpName
		from
	    ( 
	        select rownum as rno, userid, regId, name, infoStatus, hpName
			from 
			(
	            select m.userid, m.regId, m.name, m.infoStatus, h.hpName
	            from hpMember m, hospitalinfo h
	            where h.hpSeq = m.hpSeq and m.infoStatus in (1,3)
				<if test='searchWord != ""'>
					and ${searchType} like '%' || #{searchWord} || '%'
				</if>
			) V
		)T
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	<!-- 문의관리 목록 (페이징) -->
	<select id="qnaListCount" parameterType="HashMap" resultType="int">
		select count(*)
		from qnaBoard
	</select>
	<select id="qnaListPaging" parameterType="HashMap" resultType="com.synergy.socdoc.member.QnaBoardVO">
		select rno, qnaSeq, subject, userid, regDate, status
		from
	    ( 
	        select rownum as rno, qnaSeq, subject, userid, regDate, status
			from 
			(
				select qnaSeq, subject, userid, to_char(regDate,'yyyy-mm-dd') AS regDate, status
				from qnaBoard
				order by qnaSeq desc
			) V
		)T
		where rno between #{startRno} and #{endRno}
	</select>
	
	<select id="getQnaView" parameterType="String" resultType="com.synergy.socdoc.member.QnaBoardVO">
		select qnaSeq, subject, userid, regDate, content
		from qnaBoard
		where qnaSeq = #{qnaSeq}
	</select>
	
	
	<!-- 후기관리 목록 (페이징) -->
	<select id="reviewTotalCount" parameterType="HashMap" resultType="int">
		select sum(total) 
		from (
			select count (*) as total from hospitalReview 
			union all 
			select count (*) as total from pharmacyReview
		)
	</select>
    <resultMap type="HashMap" id="reviewMap">
       <result property="rno"                column="rno"                javaType="String"/>
       <result property="userid"             column="userid"             javaType="String"/>
       <result property="rating"             column="rating"             javaType="String"/>
       <result property="content"            column="content"            javaType="String"/>
       <result property="name"             	 column="name"               javaType="String"/>
       <result property="regDate"            column="regDate"            javaType="String"/>
    </resultMap>
    <select id="reviewListPaging" parameterType="HashMap" resultMap="reviewMap">
         select rno, userid, rating, content, name, regDate
         from
            (
                 (
                  select rno, userid, rating, content, hpName as name, to_char(regDate, 'yyyy-mm-dd') as regDate
                  from
                    (select rownum as rno, userid, rating, content, regDate, hpname
                    from hospitalReview
                    order by regDate desc)
                )
                union all
                (
                select rno, userid, rating, content, pharName, to_char(regDate, 'yyyy-mm-dd') as regDate
                from
                    (select rownum as rno, userid, rating, content, regDate, pharName
                    from pharmacyReview 
                    order by regDate desc)
                )
           ) T
         where rno between #{startRno} and #{endRno}
         order by rno
   </select> 
	
	
	<!-- 공지사항 글쓰기, 삭제하기, 수정하기 -->
	<insert id="noticeInsert" parameterType="HashMap">
		insert into noticeBoard (noticeSeq, subject, content, regDate)
		values(noticeSeq.nextval, #{subject}, #{content}, default)
	</insert>
	
	<delete id="delNotice" parameterType="HashMap">
         delete from noticeBoard
         where noticeSeq = #{noticeSeq}
    </delete>
    
    <update id="updateNotice" parameterType="com.synergy.socdoc.member.NoticeVO">
    	update noticeBoard set subject = #{subject}, content = #{content}, regDate = sysdate
    	where noticeSeq = #{noticeSeq}
    </update>
	
	
	<!-- 건강정보 상세 글보기 -->
	<select id="healthInfoView" parameterType="String" resultType="com.synergy.socdoc.member.HealthInfoVO">
		select  preseq, presubject, 
		        infoSeq, subject, content, imgName, regDate
		        nextseq, nextsubject
		from 
		(
		    select lag(infoSeq, 1) over(order by infoSeq desc)  as preseq
		            , lag(subject, 1) over(order by infoSeq desc) as presubject
		            , infoSeq, subject, content, imgName
		            , to_char(regDate, 'yyyy-mm-dd') as regDate
		           
		            , lead(infoSeq, 1) over(order by infoSeq desc) as nextseq
		            , lead(subject, 1) over(order by infoSeq desc) as nextsubject
		    from infoBoard
		) V
		where V.infoSeq = #{infoSeq}
	</select>
	<!-- 건강정보 글쓰기, 삭제하기, 수정하기 -->
	<insert id="infoInsert" parameterType="com.synergy.socdoc.member.HealthInfoVO">
		insert into infoBoard (infoSeq, subject, content, img, imgName, regDate)
		values(infoSeq.nextval, #{subject}, #{content}, #{img}, #{imgName}, default)
	</insert>

	
	<!-- 댓글쓰기 -->
	<insert id="addComment" parameterType="com.synergy.socdoc.member.CommentVO">
		insert into qnaComment (commentSeq, content, regDate, parentSeq)
		values(commentSeq.nextval, #{content}, default, #{parentSeq})
	</insert>	
	<select id="getCommentList" parameterType="String" resultType="com.synergy.socdoc.member.CommentVO">
		select to_char(regDate, 'yyyy-mm-dd') as regDate, content
		from qnaComment
		where parentSeq = #{parentSeq}
	</select>
	
	
	<update id="updateStatus" parameterType="String">
		update qnaBoard set status = '1'
		where qnaSeq = #{parentSeq}
	</update>
	
	<delete id="delReview" parameterType="String">
		 delete from noticeBoard
         where noticeSeq = #{noticeSeq}
	</delete>
	
	<insert id="faqInsert" parameterType="HashMap">
		insert into faqboard (faqSeq, question, answer)
		values(faqSeq.nextval, #{question}, #{answer})
	</insert>
	
	<delete id="delFAQ" parameterType="String">
		delete from faqboard
		where faqSeq = #{faqSeq}
	</delete>
	
</mapper>